---
import BaseLayout from "@/layouts/BaseLayout.astro";
import UpdatePasswordForm from "@/components/UpdatePasswordForm.astro";
import UpdateProfileForm from "@/components/UpdateProfileForm.astro";
import DeleteAccountForm from "@/components/DeleteAccountForm.astro";
import { db, Account as Acc, eq } from "astro:db";

if (!Astro.locals.session && !Astro.locals.user) {
  return Astro.redirect("/sign-in");
}

const verified = Astro.locals.user?.emailVerified;

const provider = await db
  .select({ providerId: Acc.providerId })
  .from(Acc)
  .where(eq(Acc.userId, Astro.locals.user?.id as string));

const pass = String(provider[0].providerId) === "credential" ? true : false;
---

<BaseLayout>
  <div class="wrapper | max-w-lg space-y-8">
    <h1 class="text-3xl font-bold">Account settings</h1>

    {
      !verified && (
        <div class="flex items-center justify-between">
          <h2>Your email is not verified.</h2>
          <button id="verify-email" class="btn-sm">
            Verify
          </button>
        </div>
      )
    }

    <hr />

    <UpdateProfileForm />

    <hr />

    {
      pass && (
        <>
          <UpdatePasswordForm />
          <hr />
        </>
      )
    }

    <DeleteAccountForm />
  </div>
</BaseLayout>

<script>
  import { authClient } from "@/lib/auth-client";

  const session = await authClient.getSession();
  const userEmail = session.data?.user.email as string;
  const verifyButton =
    document.querySelector<HTMLButtonElement>("#verify-email");

  verifyButton?.addEventListener("click", async (e: MouseEvent) => {
    e.preventDefault();

    try {
      await authClient.sendVerificationEmail(
        {
          email: userEmail,
          callbackURL: "/dashboard",
        },
        {
          onSuccess: (context) => {
            document.dispatchEvent(
              new CustomEvent("basecoat:toast", {
                detail: {
                  config: {
                    category: "success",
                    title: "Success",
                    description: context.data.message,
                    cancel: {
                      label: "Dismiss",
                    },
                  },
                },
              }),
            );
          },
          onError: (context) => {
            console.log(context);
            console.error("Email verification failed:", context.error.message);
          },
        },
      );
    } catch (error) {
      console.error("Unexpected error:", error);
    }
  });
</script>
