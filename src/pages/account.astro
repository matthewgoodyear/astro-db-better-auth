---
import BaseLayout from "@/layouts/BaseLayout.astro";
import UpdatePasswordForm from "@/components/UpdatePasswordForm.astro";
import UpdateProfileForm from "@/components/UpdateProfileForm.astro";
import DeleteAccountForm from "@/components/DeleteAccountForm.astro";
import { db, Account as Acc, eq } from "astro:db";
import { formatDate } from "@/lib/utils";

if (!Astro.locals.session && !Astro.locals.user) {
  return Astro.redirect("/sign-in");
}

const verified = Astro.locals.user?.emailVerified;

const provider = await db
  .select({ providerId: Acc.providerId })
  .from(Acc)
  .where(eq(Acc.userId, Astro.locals.user?.id as string));

const account = await db
  .select({ updatedAt: Acc.updatedAt })
  .from(Acc)
  .where(eq(Acc.userId, Astro.locals.user?.id as string))
  .then((rows) => rows[0]);

const isCredentials =
  String(provider[0].providerId) === "credential" ? true : false;
const userUpdatedAt = formatDate(Astro.locals.user?.updatedAt!);
const accountUpdatedAt = account ? formatDate(account.updatedAt) : null;
---

<BaseLayout>
  <div class="wrapper | max-w-lg space-y-8">
    <h1 class="text-3xl font-bold">Account settings</h1>

    {
      !verified && (
        <div class="flex items-center justify-between">
          <h2>Your email is not verified.</h2>
          <button id="verify-email" class="btn-sm">
            Verify
          </button>
        </div>
      )
    }

    <div class="card">
      <header>
        <h2 class="text-xl font-bold">Profile</h2>
        <p class="text-xs">
          Last updated: {userUpdatedAt}
        </p>
      </header>

      <section>
        <UpdateProfileForm />
      </section>
    </div>

    {
      isCredentials && (
        <div class="card">
          <header>
            <h2 class="text-xl font-bold">Update password</h2>
            <p class="text-xs">Last updated: {accountUpdatedAt}</p>
          </header>

          <section>
            <UpdatePasswordForm />
          </section>
        </div>
      )
    }

    <div class="card">
      <header>
        <h2 class="text-xl font-bold">Danger zone</h2>
      </header>

      <section>
        <DeleteAccountForm />
      </section>
    </div>
  </div>
</BaseLayout>

<script>
  import { authClient } from "@/lib/auth-client";

  const verifyButton =
    document.querySelector<HTMLButtonElement>("#verify-email");

  verifyButton?.addEventListener("click", async (e: MouseEvent) => {
    e.preventDefault();

    const session = await authClient.getSession();
    const userEmail = session.data?.user.email as string;

    try {
      await authClient.sendVerificationEmail(
        {
          email: userEmail,
          callbackURL: "/account?email-verified=true",
        },
        {
          onSuccess: (context) => {
            document.dispatchEvent(
              new CustomEvent("basecoat:toast", {
                detail: {
                  config: {
                    category: "success",
                    title: "Success",
                    description: "Email verification link sent.",
                    cancel: {
                      label: "Dismiss",
                    },
                  },
                },
              }),
            );
          },
          onError: (context) => {
            console.log(context);
            console.error("Email verification failed:", context.error.message);
          },
        },
      );
    } catch (error) {
      console.error("Unexpected error:", error);
    }
  });
</script>
