---
import { formatDate } from "@/lib/utils";

const userUpdatedAt = formatDate(Astro.locals.user?.updatedAt!);
---

<div class="space-y-6">
  <div>
    <h2 class="text-xl font-bold">Profile</h2>
    <p class="text-muted-foreground">Last updated: {userUpdatedAt}</p>
  </div>

  <form id="update-profile-form" class="space-y-6">
    <div class="grid gap-2">
      <label class="label" for="account-name">Name</label>
      <input
        id="account-name"
        class="input"
        type="text"
        name="name"
        minlength="2"
        value={Astro.locals.user?.name}
        required
      />
    </div>

    <div class="grid gap-2">
      <label class="label" for="account-email">Email</label>
      <input
        id="account-email"
        class="input"
        type="email"
        name="email"
        value={Astro.locals.user?.email}
        required
      />
    </div>

    <button class="btn" type="submit">Update profile</button>
  </form>
</div>

<script>
  import { authClient } from "@/lib/auth-client";

  const session = await authClient.getSession();
  const updateProfileForm = document.querySelector<HTMLFormElement>(
    "#update-profile-form",
  );
  const nameInput = document.getElementById(
    "account-name",
  ) as HTMLInputElement | null;
  const emailInput = document.getElementById(
    "account-email",
  ) as HTMLInputElement | null;

  nameInput?.addEventListener("input", (e: Event) => {
    const target = e.target as HTMLInputElement;
    nameInput.setAttribute("value", target.value);
  });

  emailInput?.addEventListener("input", (e: Event) => {
    const target = e.target as HTMLInputElement;
    emailInput.setAttribute("value", target.value);
  });

  updateProfileForm?.addEventListener("submit", async (e: SubmitEvent) => {
    e.preventDefault();

    const formData = new FormData(updateProfileForm);
    const name = formData.get("name") as string;
    const newEmail = formData.get("email") as string;

    try {
      if (name !== session.data?.user.name) {
        await authClient.updateUser(
          { name },
          {
            onSuccess: (context) => {
              document.dispatchEvent(
                new CustomEvent("basecoat:toast", {
                  detail: {
                    config: {
                      category: "success",
                      title: "Success",
                      description: context.data.message,
                      cancel: {
                        label: "Dismiss",
                      },
                    },
                  },
                }),
              );
            },
            onError: (context) => {
              console.error(context.error.message);
            },
          },
        );
      }

      if (newEmail !== session.data?.user.email) {
        await authClient.changeEmail(
          { newEmail },
          {
            onSuccess: (context) => {
              document.dispatchEvent(
                new CustomEvent("basecoat:toast", {
                  detail: {
                    config: {
                      category: "success",
                      title: "Success",
                      description: context.data.message,
                      cancel: {
                        label: "Dismiss",
                      },
                    },
                  },
                }),
              );
            },
            onError: (context) => {
              console.error(context.error.message);
            },
          },
        );
      }
    } catch (error) {
      console.error("Something went wrong while updating the account:", error);
    }
  });
</script>
